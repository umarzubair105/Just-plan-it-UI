Add Epic Repeatively
Export in Excel Release plan
Stat on Dashboad
Desc on Home Page
Footer
Pricing Model
Icon, SSL, UI Build, localhost:99 fixes
Deploy, Url, Email

-- Shiraz Arshad


#003366 — Deep Navy (professional + readable white text)

#1a73e8 — Google Blue (clean and modern)

#f8f9fa — Very light gray for a minimal look

#004085 — Bootstrap’s bg-primary darker tone

#dee2e6 — Bootstrap table header default

th {
  background-color: #003366;
  color: #fff;
  border-bottom: 2px solid #dee2e6;
  font-weight: 600;
}

change assign in execution/planned
Export XLS on Closing Release
On Release show Progress based on Days, Time Log, Epic Done
Changes Release Dates manually
------Estimate Pick run time
Release Auto Start
UI-Use loggedTime in UI for ResourceCapInRelease in planning/planned
Buget
Task Search List
Country based Weekend end and Holidays fill
Comments Reply and Edit
Email

import { QuillModule } from 'ngx-quill';
<quill-editor [(ngModel)]="description" [styles]="{height: '200px'}"></quill-editor>

 [innerHTML]="description"

<div class="truncate-text" title="{{ value }}">
      {{ value }}
    </div>
.truncate-text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

statusMessages = new Map<number, string>([
  [200, 'Success'],
  [400, 'Bad Request'],
  [500, 'Server Error']
]);
getMessage(code: number): string {
  return this.statusMessages.get(code) ?? 'Unknown Status';
}

for (let [key, value] of fruitMap.entries()) {
  console.log(`${key}: ${value}`);
}

const fruits = [
  { name: 'apple', quantity: 5 },
  { name: 'banana', quantity: 10 },
  { name: 'orange', quantity: 7 }
];

const fruitMap = new Map<string, number>();

fruits.forEach(fruit => {
  fruitMap.set(fruit.name, fruit.quantity);
});
const obj = { apple: 5, banana: 10, orange: 7 };
const objMap = new Map<string, number>(Object.entries(obj));


On Epic Estimate, just show roles which are defined in ProductResource.


Optimize Performance
Use lazy loading for modules to reduce the initial bundle size.

Enable AOT (Ahead-of-Time) compilation for better performance in production.

Use OnPush change detection strategy to minimize unnecessary change detection cycles.

Stay Secure
Sanitize user inputs to prevent XSS attacks.

Use Angular's built-in features like HTTPClient for secure HTTP requests.


 State Management
For complex state management, consider using libraries like NgRx or Akita.

Alternatively, Angular's built-in Services and RxJS can handle state management for smaller applications


<p>{{ 'john doe' | titleCase }}</p>

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'titleCase'
})
export class TitleCasePipe implements PipeTransform {
  transform(value: string): string {
    if (!value) return value;
    return value
      .toLowerCase()
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
}

npm install lodash

import { startCase, lowerCase } from 'lodash';

const lowercaseName = 'john doe';
const normalCaseName = startCase(lowerCase(lowercaseName));

console.log(normalCaseName); // Output: "John Doe"






import { Directive, ElementRef, Renderer2, HostListener } from '@angular/core';

@Directive({
  selector: '[appMyDirective]', // Use this selector to apply the directive
})
export class MyDirective {
  constructor(private el: ElementRef, private renderer: Renderer2) {}

  // Add event listener for mouseenter
  @HostListener('mouseenter') onMouseEnter() {
    this.setBackgroundColor('yellow');
  }

  // Add event listener for mouseleave
  @HostListener('mouseleave') onMouseLeave() {
    this.setBackgroundColor('white');
  }

  private setBackgroundColor(color: string) {
    this.renderer.setStyle(this.el.nativeElement, 'backgroundColor', color);
  }
}







<p>Step 1 Data: {{ wizardData.step1 | json }}</p>



sortBy(field: string) {
    this.employees.sort((a, b) => (a[field] > b[field] ? 1 : -1));
  }
 <thead>
     <tr>
       <th (click)="sortBy('name')">Name ⬆️⬇️</th>
       <th (click)="sortBy('department')">Department ⬆️⬇️</th>
     </tr>
   </thead>


<div cdkDropList class="list" (cdkDropListDropped)="drop($event)">
    <div *ngFor="let item of list1" cdkDrag class="item">
      {{ item }}
    </div>
  </div>

  <div cdkDropList class="list" (cdkDropListDropped)="drop($event)">
    <div *ngFor="let item of list2" cdkDrag class="item">
      {{ item }}
    </div>
  </div>

import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';

   drop(event: CdkDragDrop<string[]>) {
       if (event.previousContainer === event.container) {
         moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
       } else {
         transferArrayItem(
           event.previousContainer.data,
           event.container.data,
           event.previousIndex,
           event.currentIndex
         );
       }
     }


      <small class="text-danger" *ngIf="leaveForm.get('employeeName')?.invalid && leaveForm.get('employeeName')?.touched">
                     Name is required.
                   </small>







                   Package                         Version
                   ---------------------------------------------------------
                   @angular-devkit/architect       0.1901.7
                   @angular-devkit/build-angular   0.1101.2
                   @angular-devkit/core            19.1.7
                   @angular-devkit/schematics      19.1.7
                   @angular/cdk                    19.1.1
                   @angular/cli                    19.1.7
                   @angular/material               19.1.1
                   @schematics/angular             19.1.7
                   rxjs                            7.8.1
                   typescript                      5.5.3
                   zone.js                         0.15.0






                   <li *ngFor="let day of weekDays" [ngClass]="{ 'weekend': isWeekend(day) }">
                           {{ day }}
                         </li>



 <ngx-datatable
    [rows]="unplannedEpics"
    [columns]="unplannedTabColumn"
    [columnMode]="'force'"
    [headerHeight]="50"
    [footerHeight]="50"
    [rowHeight]="'auto'"
    class="material">
  </ngx-datatable>


  <ngx-datatable
    [rows]="rows"
    [columnMode]="'force'"
    class="material"
    (activate)="onRowSelect($event)">

    <ngx-datatable-column name="ID" prop="id"></ngx-datatable-column>
    <ngx-datatable-column name="Name" prop="name"></ngx-datatable-column>
    <ngx-datatable-column name="Email" prop="email"></ngx-datatable-column>

  </ngx-datatable>

  onRowSelect(event: any) {
      if (event.type === 'click') {
        this.router.navigate(['/profile', event.row.id]);
      }
    }

import { ChangeDetectorRef } from '@angular/core';
constructor(private cdr: ChangeDetectorRef) {}
addRow(newRow: any) {
  this.rows = [...this.rows, newRow];
  this.cdr.markForCheck();
}



 // Define ngx-datatable columns
    this.columns = [
      { prop: 'productId', name: 'Product', cellTemplate: this.productCell },
      { prop: 'resourceId', name: 'Resource', cellTemplate: this.resourceCell },
      { prop: 'participationTime', name: 'Participation Time (hrs)' },
    ];
  }

  onSubmit() {
    if (this.productForm.valid) {
      this.productResourceService.addProductResource(this.productForm.value);
      this.productForm.reset();
    }
  }

  productCell = (row: any) => {
    return this.products.find(p => p.id === row.productId)?.name || 'N/A';
  };


<ng-container *ngIf="row.status$ | async as status">
  <a (click)="updateStatus(row.id, LeaveStatus.APPROVED)" title="Approve"
     *ngIf="status === LeaveStatus.PENDING">
    <i class="bi bi-hand-thumbs-up"></i>
  </a>
</ng-container>

public leaveStatuses = Object.keys(LeaveStatus);


<label [ngClass]="{'admin-label': isAdmin, 'user-label': isUser}">
  {{ dynamicLabel }}
</label>


{
  "ITEM_COUNT": "You have {{count}} items in your cart."
}

<p>{{ 'ITEM_COUNT' | translate: { count: itemCount } }}</p>















Create a shared service
ts
Copy
Edit
// shared-data.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'  // makes it globally available
})
export class SharedDataService {
  private sharedString = new BehaviorSubject<string>(''); // Initial value

  sharedString$ = this.sharedString.asObservable();

  setSharedString(value: string): void {
    this.sharedString.next(value);
  }

  getCurrentValue(): string {
    return this.sharedString.getValue();
  }
}
2. Update the value in one component
ts
Copy
Edit
// component-a.ts
constructor(private sharedDataService: SharedDataService) {}

someMethod() {
  this.sharedDataService.setSharedString('Hello from Component A');
}
3. Read or react to the value in another component
ts
Copy
Edit
// component-b.ts
sharedValue: string = '';

constructor(private sharedDataService: SharedDataService) {}

ngOnInit() {
  this.sharedDataService.sharedString$.subscribe(value => {
    this.sharedValue = value;
  });
}
